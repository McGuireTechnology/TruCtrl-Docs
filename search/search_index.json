{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"alembic-migration-guide/","title":"Alembic Migration Guide for TruCtrl-API","text":"<p>This guide explains how to manage database schema changes for the TruCtrl-API project using Alembic and environment variables from your <code>.env</code> file.</p>"},{"location":"alembic-migration-guide/#prerequisites","title":"Prerequisites","text":"<ul> <li>Alembic is installed (see <code>requirements.txt</code>).</li> <li>The <code>.env</code> file is configured with your database settings (DB_TYPE, DB_NAME, etc.).</li> </ul>"},{"location":"alembic-migration-guide/#how-alembic-finds-the-database","title":"How Alembic Finds the Database","text":"<p>Alembic is configured to read your <code>.env</code> file and construct the database URL from the following variables: - <code>DB_TYPE</code> (e.g., <code>sqlite</code>) - <code>DB_NAME</code> (e.g., <code>tructrl.db</code>) - <code>DB_USER</code>, <code>DB_PASSWORD</code>, <code>DB_HOST</code>, <code>DB_PORT</code> (for non-SQLite databases)</p> <p>For SQLite, the URL will look like:</p> <pre><code>sqlite:///tructrl_api/tructrl.db\n</code></pre>"},{"location":"alembic-migration-guide/#common-alembic-commands","title":"Common Alembic Commands","text":""},{"location":"alembic-migration-guide/#1-generate-a-new-migration","title":"1. Generate a New Migration","text":"<p>This will create a migration script based on changes in your models:</p> <pre><code>alembic revision --autogenerate -m \"Describe your change here\"\n</code></pre>"},{"location":"alembic-migration-guide/#2-apply-migrations-upgrade-the-database","title":"2. Apply Migrations (Upgrade the Database)","text":"<p>This will apply all pending migrations to your database:</p> <pre><code>alembic upgrade head\n</code></pre>"},{"location":"alembic-migration-guide/#3-downgrade-rollback-the-last-migration","title":"3. Downgrade (Rollback) the Last Migration","text":"<pre><code>alembic downgrade -1\n</code></pre>"},{"location":"alembic-migration-guide/#4-check-current-migration-state","title":"4. Check Current Migration State","text":"<pre><code>alembic current\n</code></pre>"},{"location":"alembic-migration-guide/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>If you see errors about the database URL or missing tables, check your <code>.env</code> file and ensure all variables are set correctly.</li> <li>Alembic will use the database defined by your <code>.env</code> file every time you run a migration command.</li> </ul>"},{"location":"alembic-migration-guide/#more-info","title":"More Info","text":"<ul> <li>See Alembic documentation for advanced usage.</li> <li>For project-specific questions, see the <code>alembic/env.py</code> file for how environment variables are loaded.</li> </ul>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#example-header-comment-template","title":"Example Header Comment Template","text":"<p>Contributors should use the following header comment template at the top of each source file:</p> <pre><code>\"\"\"\nFile:         main.py\nModule:       tructrl_api\nProject:      TruCtrl-API\nCopyrigh:     \u00a9 2025 McGuire Technology, LLC and TruCtrl Contributors\nLicense:      MIT\nDescription:  Main entry point for the TruCtrl-API FastAPI application.\n</code></pre> <p>Please update the fields as appropriate for your file.</p>"},{"location":"crud-order-convention/","title":"CRUD Import and Endpoint Order Convention","text":"<p>To ensure consistency and maintainability across the TruCtrl-API codebase, all modules that implement CRUD (Create, Read, Update, Delete) logic should follow a standardized order for both import statements and endpoint/function definitions.</p>"},{"location":"crud-order-convention/#required-order","title":"Required Order","text":"<p>The correct order for CRUD-related imports and endpoint definitions is:</p> <ol> <li>list</li> <li>create</li> <li>upsert</li> <li>read</li> <li>update</li> <li>delete</li> </ol> <p>This order should be followed in: - Import statements (e.g., <code>from .crud import list, create, upsert, read, update, delete</code>) - Endpoint or function definitions in route files (e.g., <code>def list_users</code>, <code>def create_user</code>, etc.)</p>"},{"location":"crud-order-convention/#example","title":"Example","text":"<pre><code># Package Imports\nfrom .crud import list, create, upsert, read, update, delete\n\n# --- CRUD Endpoints ---\n\n# List\n@router.get(\"\")\ndef list_items(...):\n    ...\n\n# Create\n@router.post(\"\")\ndef create_item(...):\n    ...\n\n# Upsert\n@router.post(\"/upsert\")\ndef upsert_item(...):\n    ...\n\n# Read\n@router.get(\"/{id}\")\ndef get_item(...):\n    ...\n\n# Update\n@router.put(\"/{id}\")\ndef update_item(...):\n    ...\n\n# Delete\n@router.delete(\"/{id}\")\ndef delete_item(...):\n    ...\n</code></pre>"},{"location":"crud-order-convention/#rationale","title":"Rationale","text":"<ul> <li>Predictability: Developers can quickly find and understand CRUD logic in any module.</li> <li>Consistency: Reduces merge conflicts and onboarding time for new contributors.</li> <li>Documentation: This convention is referenced in code comments and should be followed in all relevant files.</li> </ul>"},{"location":"crud-order-convention/#applicability","title":"Applicability","text":"<p>This convention applies to all files in the project that: - Import CRUD functions from a local <code>crud.py</code> module - Define CRUD endpoints in FastAPI route files</p> <p>For more information, see the Import Style Guide.</p>"},{"location":"fastapi-layers/","title":"FastAPI Application Layers","text":"<p>A well-structured FastAPI application is organized into several layers, each with a clear responsibility. This separation of concerns makes your codebase easier to maintain, test, and scale. Below are the typical layers you should find in a FastAPI project:</p>"},{"location":"fastapi-layers/#1-model-layer-modelspy","title":"1. Model Layer (<code>models.py</code>)","text":"<ul> <li>Defines ORM models that map to your database tables (e.g., using SQLModel or SQLAlchemy).</li> <li>Example: <code>User</code> class describing the structure and types of your data as stored in the database.</li> </ul>"},{"location":"fastapi-layers/#2-schema-layer-schemaspy","title":"2. Schema Layer (<code>schemas.py</code>)","text":"<ul> <li>Defines Pydantic models for data validation, serialization, and deserialization.</li> <li>Used for request and response bodies in your API endpoints.</li> <li>Keeps your API contracts separate from your database models.</li> </ul>"},{"location":"fastapi-layers/#3-service-layer-servicespy","title":"3. Service Layer (<code>services.py</code>)","text":"<ul> <li>Contains business logic and operations that act on your models.</li> <li>Implements higher-level operations, such as bulk create, update, delete, or more complex workflows.</li> <li>Sits between the API routes and the database/ORM layer, making your code more modular and testable.</li> </ul>"},{"location":"fastapi-layers/#4-crud-layer-crudpy-optional","title":"4. CRUD Layer (<code>crud.py</code>) (optional)","text":"<ul> <li>Contains basic Create, Read, Update, Delete functions that directly interact with the database.</li> <li>Keeps raw database access logic separate from business logic.</li> <li>In some projects, CRUD logic is merged into the service layer.</li> </ul>"},{"location":"fastapi-layers/#5-routes-layer-routespy","title":"5. Routes Layer (<code>routes.py</code>)","text":"<ul> <li>Defines the API endpoints (HTTP routes) and connects them to the service or CRUD functions.</li> <li>Handles request/response, dependency injection, and error handling.</li> </ul>"},{"location":"fastapi-layers/#6-dependencies-layer-dependenciespy","title":"6. Dependencies Layer (<code>dependencies.py</code>)","text":"<ul> <li>Contains reusable dependency functions for authentication, authorization, database sessions, etc.</li> <li>Used with FastAPI\u2019s <code>Depends</code> system to inject shared logic into routes.</li> </ul>"},{"location":"fastapi-layers/#typical-flow-in-a-fastapi-app","title":"Typical Flow in a FastAPI App","text":"<ul> <li>Client Request \u2192 Route \u2192 Service/CRUD \u2192 Model/Database</li> <li>Database Result \u2192 Model \u2192 Schema \u2192 Route \u2192 Client Response</li> </ul>"},{"location":"fastapi-layers/#example-file-structure","title":"Example File Structure","text":"<pre><code>users/\n    models.py      # ORM models\n    schemas.py     # Pydantic schemas\n    services.py    # Business logic\n    crud.py        # (Optional) CRUD operations\n    routes.py      # API endpoints\n    dependencies.py# Dependency functions\n</code></pre> <p>This structure is scalable and aligns with FastAPI best practices.</p>"},{"location":"import-style-guide/","title":"Python Import Template and Classification Guide","text":"<p>This document describes the recommended import section template for Python files in this project, and how to determine whether an import is a Standard Library, Third-Party, Project, or Module import.</p>"},{"location":"import-style-guide/#import-section-template","title":"Import Section Template","text":"<pre><code># --- Imports ---\n\n# Standard Imports\nfrom typing import Optional\nimport os\nimport sys\n# ...other standard library imports...\n\n# Third-Party Imports\nfrom fastapi import APIRouter\nfrom sqlmodel import SQLModel, Field\nimport ulid\n# ...other pip-installed packages...\n\n# Project Imports\nfrom ..database import get_session\n# ...imports from other top-level project packages...\n\n# Package Imports\nfrom .models import User\nfrom .crud import create, read, update, delete\n# ...imports from sibling files in the same package...\n</code></pre>"},{"location":"import-style-guide/#how-to-classify-imports","title":"How to Classify Imports","text":""},{"location":"import-style-guide/#1-standard-imports","title":"1. Standard Imports","text":"<ul> <li>Definition: Modules that are part of the Python Standard Library.</li> <li>How to Identify:</li> <li>You do not need to install them with <code>pip</code>.</li> <li>They are documented in the Python Standard Library documentation.</li> <li>Examples: <code>os</code>, <code>sys</code>, <code>datetime</code>, <code>typing</code>, <code>json</code>, <code>re</code>, <code>math</code>, <code>pathlib</code>, <code>itertools</code>.</li> </ul>"},{"location":"import-style-guide/#2-third-party-imports","title":"2. Third-Party Imports","text":"<ul> <li>Definition: Modules that are not included with Python by default and must be installed (usually via <code>pip</code>).</li> <li>How to Identify:</li> <li>You (or your requirements.txt) must install them with <code>pip</code> or another package manager.</li> <li>If you try to import them in a fresh Python environment and get an ImportError, they are third-party.</li> <li>Examples: <code>fastapi</code>, <code>sqlmodel</code>, <code>ulid</code>, <code>pydantic</code>, <code>requests</code>, <code>numpy</code>, <code>pandas</code>.</li> </ul>"},{"location":"import-style-guide/#3-project-imports","title":"3. Project Imports","text":"<ul> <li>Definition: Imports from other top-level packages or modules within your own project (not the current package).</li> <li>How to Identify:</li> <li>They use relative imports with one or more dots (e.g., <code>from ..database import get_session</code>).</li> <li>They refer to code in other directories at the same or higher level in your project structure.</li> </ul>"},{"location":"import-style-guide/#4-package-imports","title":"4. Package Imports","text":"<ul> <li>Definition: Imports from sibling files/modules within the same package/directory.</li> <li>How to Identify:</li> <li>They use a single dot for relative import (e.g., <code>from .models import User</code>).</li> <li>They refer to code in the same directory as the current file.</li> </ul>"},{"location":"import-style-guide/#example","title":"Example","text":"<pre><code># --- Imports ---\n\n# Standard Imports\nfrom typing import Optional\nimport os\n\n# Third-Party Imports\nfrom fastapi import APIRouter\nfrom sqlmodel import SQLModel, Field\nimport ulid\n\n# Project Imports\nfrom ..database import get_session\n\n# Module Imports\nfrom .models import User\nfrom .crud import create, read, update, delete\n</code></pre>"},{"location":"import-style-guide/#tips","title":"Tips","text":"<ul> <li>If you are unsure, check the Python Standard Library documentation.</li> <li>If you had to install it with <code>pip</code>, it is third-party.</li> <li>Use this template for all new and existing Python files for consistency.</li> </ul>"},{"location":"api/file-layout/","title":"File layout","text":"<p>auth/models.py</p> <p>Pydantic models (Token, TokenData, User, etc.) Any ORM/database models for users or sessions (if/when you add persistent storage)</p> <p>auth/routes.py</p> <p>All authentication-related endpoints (login, refresh, logout, session management, etc.) auth/schemes.py (optional, for larger projects)</p> <p>OAuth2PasswordBearer and other security schemes</p> <p>auth/utils.py</p> <p>Helper functions: token creation, password hashing, token validation, etc.</p> <p>auth/dependencies.py</p> <p>Dependency functions for FastAPI (e.g., get_current_user, get_current_active_user)</p> <p>auth/constants.py (optional)</p> <p>Any constants (token types, error messages, etc.) auth/db.py (if you add persistent storage)</p> <p>Database access functions for users, sessions, or tokens</p>"}]}